;=================================================================
; CONSTANTS
;-----------------------------------------------------------------
; Text window
TERM_READ       EQU     FFFFh
TERM_WRITE      EQU     FFFEh
TERM_STATUS     EQU     FFFDh
TERM_CURSOR     EQU     FFFCh
TERM_COLOR      EQU     FFFBh
TERM_COL_MAX    EQU     50h
TERM_LINE_MAX   EQU     2D
; Stack
SP_INIT         EQU     7000h
; timer
TIMER_CONTROL   EQU     FFF7h
TIMER_COUNTER   EQU     FFF6h
TIMER_SETSTART  EQU     1
TIMER_SETSTOP   EQU     0
TIMERCOUNT_MAX  EQU     20
TIMERCOUNT_MIN  EQU     1
TIMERCOUNT_INIT EQU     5
; interruptions
INT_MASK        EQU     FFFAh
INT_MASK_VAL    EQU     8008h ; 1000 0000 0000 1000 b
; geração de terreno
POTENCIA        EQU     b400h
TERRENO_TAMANHO EQU     80

;=================================================================
; VARIAVEIS
;-----------------------------------------------------------------
; Geração de terreno
                ORIG    0000h
altura          WORD    8        ;altura
seed            WORD    4        ;semente
TIMER_COUNTVAL  WORD    TIMERCOUNT_INIT ; states the current counting period
TIMER_TICK      WORD    0               ; indicates the number of unattended
                                        ; timer interruptions                
                ORIG    1500h ; IMPORTANTE NAO MUDAR
terrenojogo     TAB     80

;=================================================================
; PROGRAMA PRINCIPAL
;-----------------------------------------------------------------
                ORIG    0000h
MAIN:           MVI     R6,SP_INIT
                
                ; CONFIGURE TIMER ROUNTINES
                ; interrupt mask
                MVI     R1,INT_MASK
                MVI     R2,INT_MASK_VAL
                STOR    M[R1],R2
                ; enable interruptions
                ENI

                ; START TIMER
                MVI     R2,TIMERCOUNT_INIT
                MVI     R1,TIMER_COUNTER
                STOR    M[R1],R2          ; set timer to count 10x100ms
                MVI     R1,TIMER_TICK
                STOR    M[R1],R0          ; clear all timer ticks
                MVI     R1,TIMER_CONTROL
                MVI     R2,TIMER_SETSTART
                STOR    M[R1],R2          ; start timer
                
                MVI     R5,TIMER_TICK
                JAL     TERRENO_JOGO
.loop:          LOAD    R1,M[R5]
                CMP     R1,R0
                BR.Z    .final
                ; DEC TIMER_TICK
                MVI     R2,TIMER_TICK
                DSI     ; critical region: if an interruption occurs, value might become wrong
                LOAD    R1,M[R2]
                DEC     R1
                STOR    M[R2],R1
                ENI
                ; FUNÇÕES
                JAL     ATUALIZAJOGO
                JAL     ATUALIZATERRENO

.final:         BR      .loop
                
fim:            BR      fim
                



;=================================================================
; FUNÇÕES
;-----------------------------------------------------------------
                ORIG    1000h


                ;TERRENO DE JOGO
TERRENO_JOGO:   ; GUARDAR CONTEXTO
                DEC     R6
                STOR    M[R6], R4
                DEC     R6
                STOR    M[R6],R5
                
                ;FUNÇÃO
                MVI     R2, 1600h        ;linha 16h, coluna 0h
                MVI     R4, '_'

.loop:          MVI     R1, TERM_CURSOR
                STOR    M[R1], R2
                MVI     R1, TERM_WRITE
                STOR    M[R1], R4
                
                MVI     R1, 1650h        ;linha 16h, coluna 50h
                INC     R2
                CMP     R1, R2
                BR.P    .loop
                
                ;REPOR CONTEXTO
                LOAD    R5, M[R6]
                INC     R6
                LOAD    R4, M[R6]
                INC     R6            
;-----------------------------------------------------------------
ATUALIZATERRENO:; GUARDAR CONTEXTO
                DEC     R6
                STOR    M[R6], R4
                DEC     R6
                STOR    M[R6],R5
                ;FUNÇÃO
                MVI     R4, terrenojogo ; valor do endereço na tabela e do endereço a inserir no cursor
.loop:          LOAD    R1, M[R4]
                
                ;INSERIR CACTO SE HOUVER ELEMENTO NA TABELA
                DEC     R6
                STOR    M[R6],R7
                CMP     R1, R0
                JAL.NZ  INSERIR_CACTO
                JAL.Z   INSERIR_SPACE
                LOAD    R7, M[R6]
                INC     R6
                
                ;VERIFICAR SE JÁ CHEGAMOS AO FINAL DA TABELA
                INC     R4
                MVI     R1, 1550h 
                CMP     R1, R4
                BR.P    .loop
.reporsair:     ;REPOR CONTEXTO
                LOAD    R5, M[R6]
                INC     R6
                LOAD    R4, M[R6]
                INC     R6
                ;SAIR
                JMP     R7

INSERIR_SPACE:  ;GUARDAR CONTEXTO
                DEC     R6
                STOR    M[R6], R4        ;R4 - cursor
                DEC     R6
                STOR    M[R6], R5
                MVI     R2, 10
                MVI     R5, ' '
.loop:          ;ESCREVER NO ECRÃ
                MVI     R1, TERM_CURSOR
                STOR    M[R1], R4
                MVI     R1, TERM_WRITE
                STOR    M[R1], R5
                ;TROCAR PARA LINHA ACIMA CURSOR
                MVI     R1, 100h           ;R1 - 1 linha no cursor
                SUB     R4, R4, R1
                DEC     R2
                CMP     R2, R0
                BR.P    .loop
                ;REPOR CONTEXTO
                LOAD    R5, M[R6]
                INC     R6
                LOAD    R4, M[R6]
                INC     R6
                ;SAIR
                JMP     R7



INSERIR_CACTO:  ;GUARDAR CONTEXTO
                DEC     R6
                STOR    M[R6], R4        ;R4 - cursor
                DEC     R6
                STOR    M[R6], R5
                LOAD    R2, M[R4]        ;R2 - tamanho do cacto
                
                MVI     R5, '#'
.loop:          ;ESCREVER NO ECRÃ
                MVI     R1, TERM_CURSOR
                STOR    M[R1], R4
                MVI     R1, TERM_WRITE
                STOR    M[R1], R5
                ;TROCAR PARA LINHA ACIMA CURSOR
                MVI     R1, 100h           ;R1 - 1 linha no cursor
                SUB     R4, R4, R1
                DEC     R2
                CMP     R2, R0
                BR.P    .loop
                ;REPOR CONTEXTO
                LOAD    R5, M[R6]
                INC     R6
                LOAD    R4, M[R6]
                INC     R6
                ;SAIR
                JMP     R7
;-----------------------------------------------------------------           
ATUALIZAJOGO:   ;GUARDAR CONTEXTO
                DEC     R6
                STOR    M[R6], R4 ; Guarda o valor original de R4
                DEC     R6
                STOR    M[R6], R5 ; Guarda o valor original de R5
                ;FUNÇÃO
                MVI     R1, terrenojogo
                MVI     R2, TERRENO_TAMANHO ; Número de colunas do terreno de jogo
                MVI     R4, 80
                ADD     R5, R1, R4
.loop:          MOV     R5, R1
                INC     R1
                LOAD    R4, M[R1];
                STOR    M[R5], R4 
                DEC     R2
                CMP     R2, R0
                BR.NZ   .loop
                ;EVOCAR FUNÇÃO GERACACTO
                DEC     R6
                STOR    M[R6], R7
                DEC     R6
                STOR    M[R6], R1

                MVI     R4, altura         
                LOAD    R1, M[R4] ; r1 = altura
                MVI     R4, seed 
                LOAD    R5, M[R4] ; r5 = seed  

                JAL     GERACACTO
                
                LOAD    R1, M[R6]
                INC     R6
                STOR    M[R1], R3
                LOAD    R7, M[R6]
                INC     R6
                ; REPOR CONTEXTO
                LOAD    R5, M[R6] ; Retomar valor original de R5
                INC     R6
                LOAD    R4, M[R6] ; Retomar valor original de R4
                INC     R6
                ; SAIR
                JMP     R7


GERACACTO:      ;GUARDAR CONTEXTO
                DEC     R6
                STOR    M[R6], R4 ; Guarda o valor original de R4
                DEC     R6
                STOR    M[R6], R5 ; Guarda o valor original de R5              
                
                ;FUNÇÃO
                MVI     R4, 1        
                AND     R4, R5, R4 ; r4 irá ser o bit, bit = x & 1
                SHR     R5 ; x = x >> 1
                CMP     R4, R0 ;if bit: (se bit for o, logo False            
                BR.Z    .pont ;          salta para pont)
                MVI     R4, POTENCIA        
                XOR     R5, R5, R4 ; x = XOR(x, b400h)
                
.pont:          MVI     R4, F332h ; if x < 62258
                CMP     R5, R4
                BR.NC   .return                
                MVI     R3, 0 ;return é 0
                MVI     R4, seed ; x é global
                STOR    M[R4], R5
                BR      .reporsair
                
.return:        ; so ocorre se o return for diferente de 0
                DEC     R1 ; return (x & (altura - 1)) + 1
                AND     R3, R1, R5
                INC     R3
                MVI     R4, seed ; x é global
                STOR    M[R4], R5
                
.reporsair:     ; REPOR CONTEXTO
                LOAD    R5, M[R6] ; Retomar valor original de R5
                INC     R6
                LOAD    R4, M[R6] ; Retomar valor original de R4
                INC     R6
                ;SAIR
                JMP     R7 
                
;-------------------------------------------------------------------------------            

;*****************************************************************
; AUXILIARES INTERRUPÇÕES
;*****************************************************************
AUX_TIMER_ISR:  ; SAVE CONTEXT
                DEC     R6
                STOR    M[R6],R1
                DEC     R6
                STOR    M[R6],R2
                ; RESTART TIMER
                MVI     R1,TIMER_COUNTVAL
                LOAD    R2,M[R1]
                MVI     R1,TIMER_COUNTER
                STOR    M[R1],R2          ; set timer to count value
                MVI     R1,TIMER_CONTROL
                MVI     R2,TIMER_SETSTART
                STOR    M[R1],R2          ; start timer
                ; INC TIMER FLAG
                MVI     R2,TIMER_TICK
                LOAD    R1,M[R2]
                INC     R1
                STOR    M[R2],R1
                ; RESTORE CONTEXT
                LOAD    R2,M[R6]
                INC     R6
                LOAD    R1,M[R6]
                INC     R6
                JMP     R7

;*****************************************************************
; INTERRUPÇÕES
;*****************************************************************
                ORIG    7FF0h
TIMER_ISR:      ; SAVE CONTEXT
                DEC     R6
                STOR    M[R6],R7
                ; CALL AUXILIARY FUNCTION
                JAL     AUX_TIMER_ISR
                ; RESTORE CONTEXT
                LOAD    R7,M[R6]
                INC     R6
                RTI
                
                ORIG    7F30h


